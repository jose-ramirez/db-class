1.  Find the names of all reviewers who rated Gone with the Wind.

    #aqui es indistinto usar = o in al final de la segunda linea
    #del query, siempre y cuando el select que le sigue retorne
    #un solo valor:

    select name from reviewer where rid in
    (select rid from rating where mid =
    (select mid from movie where title = 'Gone with the Wind'))

2.  For any rating where the reviewer is the same as the director of the movie,
    return the reviewer name, movie title, and number of stars.

    select name, title, stars from reviewer join movie join rating on
    reviewer.rid = rating.rid and movie.mid = rating.mid and
    name = director

3.  Return all reviewer names and movie names together in a single list,
    alphabetized. (Sorting by the first name of the reviewer and first word 
    in the title is fine; no need for special processing on last names or
    removing "The".) 

    select distinct title as name from movie union
    select name from reviewer order by name

4.  Find the titles of all movies not reviewed by Chris Jackson.

    select title from movie where mid not in (
    select mid from rating where rid = 
    (select rid from reviewer where name = 'Chris Jackson'))

5.  For all pairs of reviewers such that both reviewers gave a rating to the
    same movie, return the names of both reviewers. Eliminate duplicates,
    don't pair reviewers with themselves, and include each pair only once.
    For each pair, return the names in the pair in alphabetical order.

    select distinct r1.name, r2.name from
    reviewer as r1 join reviewer as r2 join movie as m on
    m.mid in (select mid from rating where r1.rid = rid) and
    m.mid in (select mid from rating where r2.rid = rid) and
    r1.name < r2.name

6.  For each rating that is the lowest (fewest stars) currently in the
    database, return the reviewer name, movie title, and number of stars.

    select rev.name, m.title, rat.stars from
    reviewer as rev join movie as m join rating as rat on
    rat.rid = rev.rid and m.mid = rat.mid and stars = (select min(stars) from rating)

7.  List movie titles and average ratings, from highest-rated to lowest-rated.
    If two or more movies have the same average rating, list them in alphabetical
    order.

    select title, avg(stars) as avg from movie join rating on
    movie.mid = rating.mid group by title order by avg desc, title

8.  Find the names of all reviewers who have contributed three or more ratings.
    (As an extra challenge, try writing the query without HAVING or without COUNT.) 

    select name from reviewer join rating on reviewer.rid = rating.rid
    group by name having count(*) > 2

9.  Some directors directed more than one movie. For all such directors, return
    the titles of all movies directed by them, along with the director name. Sort
    by director name, then movie title. (As an extra challenge, try writing the
    query both with and without COUNT.)

    select title, director from movie where director in
    (select director from movie group by director having count(title) > 1)
    order by director, title

10. Find the movie(s) with the highest average rating. Return the movie title(s)
    and average rating. (Hint: This query is more difficult to write in SQLite
    than other systems; you might think of it as finding the highest average
    rating and then choosing the movie(s) with that average rating.)

    select title, avg(stars) as a1 from rating join movie on
    rating.mid = movie.mid group by movie.mid
    having a1 = 
    (select max(R.avg) from (select avg(stars) as avg from
    rating join movie on rating.mid = movie.mid group by movie.mid) as R)

11. Find the movie(s) with the lowest average rating. Return the movie title(s)
    and average rating. (Hint: This query may be more difficult to write in SQLite
    than other systems; you might think of it as finding the lowest average rating
    and then choosing the movie(s) with that average rating.)

    select title, avg(stars) as a1 from rating join movie on
    rating.mid = movie.mid group by movie.mid
    having a1 = 
    (select min(R.avg) from (select avg(stars) as avg from
    rating join movie on rating.mid = movie.mid group by movie.mid) as R)

12.	For each director, return the director's name together with the title(s) of
    the movie(s) they directed that received the highest rating among all of
	their movies, and the value of that rating. Ignore movies whose director is
	NULL. 

	select director, title, max(stars) from rating join movie on movie.mid =
	rating.mid where director is not null group by director
