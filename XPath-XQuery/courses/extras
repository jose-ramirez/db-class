1.  Return the course number of the course that is cross-listed as "LING180".

    //Course[contains(Description, "Cross-listed as LING180")]/data(@Number)

2.  Return course numbers of courses that have the same title as some other course. 
    (Hint: You might want to use the "preceding" and "following" navigation axes
    for this query, which were not covered in the video or our demo script; they
    match any preceding or following node, not just siblings.)

    //Course[following::Title = Title or preceding::Title = Title]/data(@Number)

3.  Return course numbers of courses taught by an instructor with first name
    "Daphne" or "Julie".

    //Course[Instructors/(Professor | Lecturer)[First_Name = "Daphne" or 
    First_Name = "Julie"]]/data(@Number)

4.  Return the number (count) of courses that have no lecturers as instructors.

    count(//Course) - count(//Course[Instructors/Lecturer]) or
    count(//Course[not(Instructors/Lecturer)])

5.  Return titles of courses taught by the chair of a department. For this
    question, you may assume that all professors have distinct last names.

    //Course[Instructors/(Professor|Lecturer)/Last_Name =
    ../Chair/Professor/Last_Name]/Title

6.  Return titles of courses that have both a lecturer and a professor as 
    instructors. Return each title only once.

    //Course[Instructors/Professor and Instructors/Lecturer]/Title

7.  Return titles of courses taught by a professor with the last name "Ng" but
    not by a professor with the last name "Thrun".

    //Course[Instructors/Professor/Last_Name = "Ng" and not(Instructors/Professor
    /Last_Name = "Thrun")]/Title

8.  Return course numbers of courses that have a course taught by Eric Roberts as
    a prerequisite.

    //Course[Prerequisites/Prereq = //Course[Instructors/(Professor | Lecturer)
    /Last_Name = "Roberts"]/data(@Number)]/data(@Number)

9.  Create a summary of CS classes: List all CS department courses in order of
    enrollment. For each course include only its Enrollment (as an attribute)
    and its Title (as a subelement).

    //averiguar como funciona el index-of!
    <Summary>{
        for $c in //Course[index-of(//Course/Title, ./Title)[1]]
        let $e := $c/data(@Enrollment)
        order by xs:decimal($e)
        return <Course Enrollment= "{$e}">{$c/Title}</Course>
    }</Summary>